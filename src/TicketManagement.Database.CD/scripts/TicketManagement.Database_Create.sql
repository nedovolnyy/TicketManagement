/*
Deployment script for TicketManagement.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TicketManagement.Database"
:setvar DefaultFilePrefix "TicketManagement.Database"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Venue]...';


GO
CREATE TABLE [dbo].[Venue] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (120) NOT NULL,
    [Description] NVARCHAR (120) NOT NULL,
    [Address]     NVARCHAR (200) NOT NULL,
    [Phone]       NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Seat]...';


GO
CREATE TABLE [dbo].[Seat] (
    [Id]     INT IDENTITY (1, 1) NOT NULL,
    [AreaId] INT NOT NULL,
    [Row]    INT NOT NULL,
    [Number] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Layout]...';


GO
CREATE TABLE [dbo].[Layout] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (120) NOT NULL,
    [VenueId]     INT            NOT NULL,
    [Description] NVARCHAR (120) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[EventSeat]...';


GO
CREATE TABLE [dbo].[EventSeat] (
    [Id]          INT     IDENTITY (1, 1) NOT NULL,
    [EventAreaId] INT     NOT NULL,
    [Row]         INT     NOT NULL,
    [Number]      INT     NOT NULL,
    [State]       TINYINT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[EventArea]...';


GO
CREATE TABLE [dbo].[EventArea] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [EventId]     INT             NOT NULL,
    [Description] NVARCHAR (200)  NOT NULL,
    [CoordX]      INT             NOT NULL,
    [CoordY]      INT             NOT NULL,
    [Price]       DECIMAL (18, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [Id]             INT                IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (120)     NOT NULL,
    [EventTime]      DATETIMEOFFSET (0) NOT NULL,
    [Description]    NVARCHAR (MAX)     NOT NULL,
    [LayoutId]       INT                NOT NULL,
    [EventEndTime]   DATETIME2 (0)      NOT NULL,
    [EventLogoImage] NVARCHAR (MAX)     NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[AspNetUserTokens]...';


GO
CREATE TABLE [dbo].[AspNetUserTokens] (
    [UserId]        NVARCHAR (450) NOT NULL,
    [LoginProvider] NVARCHAR (128) NOT NULL,
    [Name]          NVARCHAR (128) NOT NULL,
    [Value]         NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_AspNetUserTokens] PRIMARY KEY CLUSTERED ([UserId] ASC, [LoginProvider] ASC, [Name] ASC)
);


GO
PRINT N'Creating Table [dbo].[AspNetUsers]...';


GO
CREATE TABLE [dbo].[AspNetUsers] (
    [Id]                   NVARCHAR (450)     NOT NULL,
    [UserName]             NVARCHAR (256)     NULL,
    [NormalizedUserName]   NVARCHAR (256)     NULL,
    [Email]                NVARCHAR (256)     NULL,
    [NormalizedEmail]      NVARCHAR (256)     NULL,
    [EmailConfirmed]       BIT                NOT NULL,
    [PasswordHash]         NVARCHAR (MAX)     NULL,
    [SecurityStamp]        NVARCHAR (MAX)     NULL,
    [ConcurrencyStamp]     NVARCHAR (MAX)     NULL,
    [PhoneNumber]          NVARCHAR (MAX)     NULL,
    [PhoneNumberConfirmed] BIT                NOT NULL,
    [TwoFactorEnabled]     BIT                NOT NULL,
    [LockoutEnd]           DATETIMEOFFSET (7) NULL,
    [LockoutEnabled]       BIT                NOT NULL,
    [AccessFailedCount]    INT                NOT NULL,
    [FirstName]            NVARCHAR (256)     NULL,
    [SurName]              NVARCHAR (256)     NULL,
    [Language]             NVARCHAR (256)     NULL,
    [TimeZone]             NVARCHAR (256)     NULL,
    [CartCount]            INT                NOT NULL,
    [Balance]              DECIMAL (18, 2)    NOT NULL,
    [PayHistory]           NVARCHAR (MAX)     NULL,
    CONSTRAINT [PK_AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetUsers].[UserNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UserNameIndex]
    ON [dbo].[AspNetUsers]([NormalizedUserName] ASC) WHERE [NormalizedUserName] IS NOT NULL;


GO
PRINT N'Creating Index [dbo].[AspNetUsers].[EmailIndex]...';


GO
CREATE NONCLUSTERED INDEX [EmailIndex]
    ON [dbo].[AspNetUsers]([NormalizedEmail] ASC);


GO
PRINT N'Creating Table [dbo].[AspNetUserRoles]...';


GO
CREATE TABLE [dbo].[AspNetUserRoles] (
    [UserId] NVARCHAR (450) NOT NULL,
    [RoleId] NVARCHAR (450) NOT NULL,
    CONSTRAINT [PK_AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetUserRoles].[IX_AspNetUserRoles_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AspNetUserRoles_RoleId]
    ON [dbo].[AspNetUserRoles]([RoleId] ASC);


GO
PRINT N'Creating Table [dbo].[AspNetUserLogins]...';


GO
CREATE TABLE [dbo].[AspNetUserLogins] (
    [LoginProvider]       NVARCHAR (128) NOT NULL,
    [ProviderKey]         NVARCHAR (128) NOT NULL,
    [ProviderDisplayName] NVARCHAR (MAX) NULL,
    [UserId]              NVARCHAR (450) NOT NULL,
    CONSTRAINT [PK_AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetUserLogins].[IX_AspNetUserLogins_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AspNetUserLogins_UserId]
    ON [dbo].[AspNetUserLogins]([UserId] ASC);


GO
PRINT N'Creating Table [dbo].[AspNetUserClaims]...';


GO
CREATE TABLE [dbo].[AspNetUserClaims] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [UserId]     NVARCHAR (450) NOT NULL,
    [ClaimType]  NVARCHAR (MAX) NULL,
    [ClaimValue] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetUserClaims].[IX_AspNetUserClaims_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AspNetUserClaims_UserId]
    ON [dbo].[AspNetUserClaims]([UserId] ASC);


GO
PRINT N'Creating Table [dbo].[AspNetRoles]...';


GO
CREATE TABLE [dbo].[AspNetRoles] (
    [Id]               NVARCHAR (450) NOT NULL,
    [Name]             NVARCHAR (256) NULL,
    [NormalizedName]   NVARCHAR (256) NULL,
    [ConcurrencyStamp] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetRoles].[RoleNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [RoleNameIndex]
    ON [dbo].[AspNetRoles]([NormalizedName] ASC) WHERE [NormalizedName] IS NOT NULL;


GO
PRINT N'Creating Table [dbo].[AspNetRoleClaims]...';


GO
CREATE TABLE [dbo].[AspNetRoleClaims] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [RoleId]     NVARCHAR (450) NOT NULL,
    [ClaimType]  NVARCHAR (MAX) NULL,
    [ClaimValue] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_AspNetRoleClaims] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[AspNetRoleClaims].[IX_AspNetRoleClaims_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AspNetRoleClaims_RoleId]
    ON [dbo].[AspNetRoleClaims]([RoleId] ASC);


GO
PRINT N'Creating Table [dbo].[Area]...';


GO
CREATE TABLE [dbo].[Area] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [LayoutId]    INT            NOT NULL,
    [Description] NVARCHAR (200) NOT NULL,
    [CoordX]      INT            NOT NULL,
    [CoordY]      INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Seat]...';


GO
ALTER TABLE [dbo].[Seat]
    ADD DEFAULT 1 FOR [AreaId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Layout]...';


GO
ALTER TABLE [dbo].[Layout]
    ADD DEFAULT 1 FOR [VenueId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[EventSeat]...';


GO
ALTER TABLE [dbo].[EventSeat]
    ADD DEFAULT 1 FOR [EventAreaId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[EventSeat]...';


GO
ALTER TABLE [dbo].[EventSeat]
    ADD DEFAULT 0 FOR [State];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[EventArea]...';


GO
ALTER TABLE [dbo].[EventArea]
    ADD DEFAULT 1 FOR [EventId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Event]...';


GO
ALTER TABLE [dbo].[Event]
    ADD DEFAULT 1 FOR [LayoutId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AspNetUsers]...';


GO
ALTER TABLE [dbo].[AspNetUsers]
    ADD DEFAULT 0 FOR [CartCount];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AspNetUsers]...';


GO
ALTER TABLE [dbo].[AspNetUsers]
    ADD DEFAULT 0 FOR [Balance];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Area]...';


GO
ALTER TABLE [dbo].[Area]
    ADD DEFAULT 1 FOR [LayoutId];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Area_Seat]...';


GO
ALTER TABLE [dbo].[Seat]
    ADD CONSTRAINT [FK_Area_Seat] FOREIGN KEY ([AreaId]) REFERENCES [dbo].[Area] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Venue_Layout]...';


GO
ALTER TABLE [dbo].[Layout]
    ADD CONSTRAINT [FK_Venue_Layout] FOREIGN KEY ([VenueId]) REFERENCES [dbo].[Venue] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventArea_EventSeat]...';


GO
ALTER TABLE [dbo].[EventSeat]
    ADD CONSTRAINT [FK_EventArea_EventSeat] FOREIGN KEY ([EventAreaId]) REFERENCES [dbo].[EventArea] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Event_EventArea]...';


GO
ALTER TABLE [dbo].[EventArea]
    ADD CONSTRAINT [FK_Event_EventArea] FOREIGN KEY ([EventId]) REFERENCES [dbo].[Event] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Layout_Event]...';


GO
ALTER TABLE [dbo].[Event]
    ADD CONSTRAINT [FK_Layout_Event] FOREIGN KEY ([LayoutId]) REFERENCES [dbo].[Layout] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserTokens_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserTokens]
    ADD CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserRoles_AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserRoles_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserLogins_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins]
    ADD CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserClaims_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims]
    ADD CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetRoleClaims_AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetRoleClaims]
    ADD CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Layout_Area]...';


GO
ALTER TABLE [dbo].[Area]
    ADD CONSTRAINT [FK_Layout_Area] FOREIGN KEY ([LayoutId]) REFERENCES [dbo].[Layout] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Procedure [dbo].[spEventIsAllAvailableSeats]...';


GO
CREATE PROCEDURE dbo.spEventIsAllAvailableSeats
(
	@Id INT = null,
	@IsAllAvailableSeats BIT = null OUTPUT
)
AS

IF (SELECT COUNT(Id) FROM dbo.EventSeat WHERE State = 0 AND
		  EventAreaId IN (SELECT Id FROM dbo.EventArea WHERE EventId = @Id))
		  = (SELECT COUNT(Id) FROM dbo.Seat WHERE AreaId IN
				(SELECT Id FROM dbo.Area WHERE LayoutId IN (SELECT LayoutId FROM dbo.Event WHERE Id = @Id)))
	SELECT @IsAllAvailableSeats = 1
ELSE
	SELECT @IsAllAvailableSeats = 0 ;
GO
PRINT N'Creating Procedure [dbo].[spEventInsert]...';


GO
CREATE PROCEDURE dbo.spEventInsert
(
	@Name NVARCHAR(120) = null,
    @EventTime DATETIMEOFFSET = null,
	@Description NVARCHAR(max) = null,
	@LayoutId INT = null,
	@EventEndTime DATETIME2 = null,
	@EventLogoImage NVARCHAR(max) = null,
	@Price DECIMAL(18,2) = null
)
AS
BEGIN
		--INSERT INTO EVENT
		INSERT INTO dbo.Event (Name, EventTime, Description, LayoutId, EventEndTime, EventLogoImage)
			VALUES (@Name, @EventTime, @Description, @LayoutId, @EventEndTime, @EventLogoImage)
		DECLARE @eventId INT = @@IDENTITY

		--INSERT INTO EVENT AREA
		INSERT INTO dbo.EventArea (EventId, Description, CoordX, CoordY, Price)
			SELECT @eventId, areaTable.areaDescription, areaTable.CoordX, areaTable.CoordY, @Price FROM
				(SELECT A.Description AS areaDescription, A.CoordX, A.CoordY FROM Layout L
					Join Area A ON A.LayoutId=L.Id                  
					WHERE L.Id = @LayoutId
				)  as areaTable

		--INSERT INTO EVENT SEAT
		INSERT INTO dbo.EventSeat (EventAreaId, Row, Number, State)
			SELECT tempTable.EventAreaId,  tempTable.Row, tempTable.Number, 0 FROM
				(SELECT DISTINCT E.Id AS EventId, EA.Id AS EventAreaId, S.Row, S.Number FROM (SELECT Id, LayoutId FROM dbo.Event) E 
					join (SELECT Id, LayoutId FROM dbo.Area) A ON E.LayoutId = A.LayoutId
					join (SELECT Id, EventId FROM dbo.EventArea) EA ON E.Id = EA.EventId
					join (SELECT AreaId, Row, Number FROM dbo.Seat) S ON A.Id = S.AreaId
					WHERE E.LayoutId = @LayoutId AND E.Id = @eventId
				) as tempTable
END
GO
PRINT N'Creating Procedure [dbo].[spEventGetPriceByEventId]...';


GO
CREATE PROCEDURE dbo.spEventGetPriceByEventId
(
	@EventId INT = null,
	@Price DECIMAL(18,2) = null OUTPUT
)
AS
SELECT @Price = Price FROM dbo.EventArea WHERE EventId = @EventId
GO
PRINT N'Creating Procedure [dbo].[spEventGetById]...';


GO
CREATE PROCEDURE dbo.spEventGetById
(
	@Id INT = null
)
AS
        SELECT Id, Name, EventTime, Description, LayoutId, EventEndTime, EventLogoImage FROM dbo.Event
			WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[spEventGetAll]...';


GO
CREATE PROCEDURE dbo.spEventGetAll
AS
SELECT Id, Name, EventTime, Description, LayoutId, EventEndTime, EventLogoImage FROM dbo.Event
GO
PRINT N'Creating Procedure [dbo].[spEventForValidationByLayout]...';


GO
CREATE PROCEDURE dbo.spEventForValidationByLayout
(
	@LayoutId INT = null
)
AS
        SELECT Id, Name, EventTime, Description, LayoutId, EventEndTime, EventLogoImage FROM dbo.Event
			WHERE LayoutId = @LayoutId
GO
PRINT N'Creating Procedure [dbo].[spEventDelete]...';


GO
CREATE PROCEDURE dbo.spEventDelete
(
	@Id INT = null
)
AS
BEGIN
        DELETE dbo.EventSeat WHERE EventAreaId IN (SELECT Id FROM dbo.EventArea WHERE EventId = @Id)
        DELETE dbo.EventArea WHERE EventId = @Id
        DELETE dbo.Event WHERE Id = @Id
END
GO
PRINT N'Creating Procedure [dbo].[spEventCountSeats]...';


GO
CREATE PROCEDURE dbo.spEventCountSeats
(
	@LayoutId INT = null,
	@CountSeats INT = null OUTPUT
)
AS

SELECT @CountSeats = COUNT(Id) FROM dbo.Seat
	WHERE AreaId IN (SELECT Id FROM dbo.Area WHERE LayoutId = @LayoutId)
GO
PRINT N'Creating Procedure [dbo].[spEventCountAvailableSeats]...';


GO
CREATE PROCEDURE dbo.spEventCountAvailableSeats
(
	@Id INT = null,
	@CountAvailableSeats INT = null OUTPUT
)
AS

SELECT @CountAvailableSeats = COUNT(Id) FROM dbo.EventSeat
	WHERE State = 0 AND
		  EventAreaId IN (SELECT Id FROM dbo.EventArea WHERE EventId = @Id)
GO
PRINT N'Creating Procedure [dbo].[spEventUpdate]...';


GO
CREATE PROCEDURE dbo.spEventUpdate
(
	@Id INT = null,
	@Name NVARCHAR(120) = null,
    @EventTime DATETIMEOFFSET = null,
	@Description NVARCHAR(max) = null,
	@LayoutId INT = null,
	@EventEndTime DATETIME2 = null,
	@EventLogoImage NVARCHAR(max) = null,
	@Price DECIMAL(18,2) = null
)
AS
BEGIN
	IF EXISTS (SELECT Id FROM dbo.Event WHERE LayoutId = @LayoutId AND Id = @Id)
        UPDATE dbo.Event SET Name = @Name, EventTime = @EventTime, Description = @Description, LayoutId = @LayoutId, EventEndTime = @EventEndTime, EventLogoImage = @EventLogoImage WHERE Id = @Id
	
	ELSE BEGIN
		
		--DELETE EVENT AREA, EVENT SEAT
		DELETE dbo.EventSeat WHERE EventAreaId IN (SELECT Id FROM dbo.EventArea WHERE EventId = @Id)
        DELETE dbo.EventArea WHERE EventId = @Id

		--UPDATE EVENT
		UPDATE dbo.Event SET Name = @Name, EventTime = @EventTime, Description = @Description, LayoutId = @LayoutId, EventEndTime = @EventEndTime, EventLogoImage = @EventLogoImage WHERE Id = @Id
		
		--INSERT INTO EVENT AREA
		INSERT INTO dbo.EventArea (EventId, Description, CoordX, CoordY, Price)
			SELECT @Id, areaTable.areaDescription, areaTable.CoordX, areaTable.CoordY, @Price FROM
				(SELECT A.Description AS areaDescription, A.CoordX, A.CoordY FROM Layout L
					Join Area A ON A.LayoutId=L.Id                  
					WHERE L.Id = @LayoutId
				)  as areaTable

		--INSERT INTO EVENT SEAT
		INSERT INTO dbo.EventSeat (EventAreaId, Row, Number, State)
			SELECT tempTable.EventAreaId,  tempTable.Row, tempTable.Number, 0 FROM
				(SELECT DISTINCT E.Id AS EventId, EA.Id AS EventAreaId, S.Row, S.Number FROM (SELECT Id, LayoutId FROM dbo.Event) E 
					join (SELECT Id, LayoutId FROM dbo.Area) A ON E.LayoutId = A.LayoutId
					join (SELECT Id, EventId FROM dbo.EventArea) EA ON E.Id = EA.EventId
					join (SELECT AreaId, Row, Number FROM dbo.Seat) S ON A.Id = S.AreaId
					WHERE E.LayoutId = @LayoutId AND E.Id = @Id
				) as tempTable

	END
END
GO
--- Venue
insert into dbo.Venue
	values 
		('First venue', 'Description of first venue', 'First venue address', '123 45 678 90 12'),
		('Second venue', 'Description of second venue', 'Second venue address', '544 38 665 90 64'),
		('Third venue', 'Description of third venue', 'Third venue address', '953 69 678 30 17'),
		('Fourth venue', 'Description of fourth venue', 'Fourth venue address', '374 38 665 63 64'),
		('Fifth venue', 'Description of fifth venue', 'Five venue address', '953 69 678 30 17'),
		('Sixth venue', 'Description of sixth venue', 'Sixth venue address', '544 38 665 90 64'),
		('Seventh venue', 'Description of seventh venue', 'Seventh venue address', '953 69 638 30 17'),
		('Eighth venue', 'Description of eighth venue', 'Eighth venue address', '374 38 665 63 64'),
		('Ninth venue', 'Description of ninth venue', 'Ninth venue address', '953 69 678 40 17'),
		('Tenth venue', 'Description of tenth venue', 'Tenth venue address', '544 38 655 90 64'),
		('Eleventh venue', 'Description of eleventh venue', 'Eleventh venue address', '953 69 678 30 17'),
		('Twelfth venue', 'Description of twelfth venue', 'Twelfth venue address', '374 38 665 63 64')

--- Layout
insert into dbo.Layout
	values 
		('First layout', 1, 'Description of first layout'),
		('Second layout', 2, 'Description of second layout'),
		('Third layout', 3, 'Description of third layout'),
		('Fourth layout', 4, 'Description of fourth layout'),
		('Fifth layout', 5, 'Description of fifth layout'),
		('Sixth layout', 6, 'Description of sixth layout'),
		('Seventh layout', 7, 'Description of seventh layout'),
		('Eighth layout', 8, 'Description of eighth layout'),
		('Ninth layout', 9, 'Description of ninth layout'),
		('Tenth layout', 10, 'Description of tenth layout'),
		('Eleventh layout', 11, 'Description of eleventh layout'),
		('Twelfth layout', 12, 'Description of twelfth layout')

--- Area
insert into dbo.Area
	values 
		(1, 'First area of first layout', 3, 1),
		(2, 'First area of second layout', 4, 2),
		(3, 'First area of third layout', 5, 1),
		(4, 'First area of fourth layout', 4, 9),
		(5, 'First area of fifth layout', 7, 8),
		(6, 'First area of sixth layout', 6, 2),
		(7, 'First area of seventh layout', 1, 7),
		(8, 'First area of eighth layout', 9, 5),
		(9, 'First area of ninth layout', 3, 1),
		(10, 'First area of tenth layout', 7, 2),
		(11, 'First area of eleventh layout', 8, 1),
		(12, 'First area of twelfth layout', 6, 9)
				
--- Seat
insert into dbo.Seat
	values
		(1, 1, 1),
		(1, 1, 2),
		(1, 1, 3),
		(1, 2, 1),
		(1, 2, 2),
		(1, 2, 3),
		(2, 1, 1),
		(2, 1, 2),
		(2, 2, 1),
		(2, 2, 2),
		(3, 1, 1),
		(3, 1, 2),
		(3, 2, 1),
		(3, 2, 2),
		(4, 1, 1),
		(4, 1, 2),
		(4, 2, 1),
		(4, 2, 2),
		(5, 1, 1),
		(5, 1, 2),
		(5, 2, 1),
		(5, 2, 2),
		(6, 1, 1),
		(6, 1, 2),
		(6, 1, 3),
		(6, 2, 1),
		(6, 2, 2),
		(6, 2, 3),
		(7, 1, 1),
		(7, 1, 2),
		(7, 2, 1),
		(7, 2, 2),
		(8, 1, 1),
		(8, 1, 2),
		(8, 2, 1),
		(8, 2, 2),
		(9, 1, 1),
		(9, 1, 2),
		(9, 2, 1),
		(9, 2, 2),
		(10, 1, 1),
		(10, 1, 2),
		(10, 2, 1),
		(10, 2, 2)

--- Event
insert into dbo.Event
	values 
		('Sider-Man II', '2023-05-30 00:00:00', 'Spider-Man II Movie', 1, '2023-05-30 08:45:00', 'https://i0.wp.com/www.mwcshanghai.com/wp-content/uploads/2022/01/hero-2022-general1.jpg?resize=2100%2C720&ssl=1'),
		('Venom', '2023-06-08 00:00:00', 'Venom Movie', 2, '2023-06-08 08:00:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ-OjfE50Jq3Nq3V3AAy_gzaM98XUqqYN9P66USiVMA2NaZ4cADyObgEMrpACLzDAeX57c&usqp=CAU'),
		('Soccer', '2023-05-30 00:00:00', 'CSKA-TSMOKY', 3, '2023-05-30 09:30:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRzDw_RhIiz9mF87VSo4RefxN5IIk94hdQ50awkHa2-Kn-GxZFxkHzi0ZTHMbu5uBpCY54&usqp=CAU'),
		('Venom', '2023-06-08 00:00:00', 'Venom Movie', 4, '2023-06-08 07:00:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQpwViCv8QGIKNs9KmUBV6o85H1GSKtQTqs7J8Hw-7pwrL9vvTXHfzPztXyozkruU7uz8g&usqp=CAU'),
		('Soccer', '2023-05-30 00:00:00', 'CSKA-TSMOKY', 5, '2023-05-30 09:30:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1IZ9TiitYWL-I_0GUEF1q6kG0eL_kIbOrKfR2D0EricNf0OO0R0d9o9Ex5ZbBKxuEgh4&usqp=CAU'),
		('Venom', '2023-06-08 00:00:00', 'Venom Movie', 6, '2023-06-08 08:00:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSokh2e7sgFpBYCYU--b9p3mwGH_dNatPiS9g&usqp=CAU'),
		('Soccer', '2023-05-30 00:00:00', 'CSKA-TSMOKY', 7, '2023-05-30 09:30:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSx4b1YOW470HqawzSbh5WVNFGgRt8RY5jOFv9tnUX9PI651u4Wp4nIEcfHH0cb7XwDQ68&usqp=CAU'),
		('Venom', '2023-06-08 00:00:00', 'Venom Movie', 8, '2023-06-08 07:00:00', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT2QvuRQA_ovTyaLVz1Cdcm_Ac7hIlDUiP1LESnSqzxF0D3YnjaIDxNnVNDSRfQ9dz7zKI&usqp=CAU'),
		('Soccer', '2023-05-30 00:00:00', 'CSKA-TSMOKY', 9, '2023-05-30 09:30:00', 'https://cdn.concreteplayground.com/content/uploads/2020/07/EventCinemas-supplied.jpg'),
		('Soccer', '2023-05-30 00:00:00', 'CSKA-TSMOKY', 10, '2023-05-30 08:30:00', 'https://cdn.concreteplayground.com/content/uploads/2020/07/Event-Cinemas_auditorium_supplied.jpg')

--- EventArea
insert into dbo.EventArea
	values 
		(1, 'Cinema Hall #2', 2, 1, CAST(5.20 AS Decimal(18, 2))),
		(2, 'Cinema Hall #1', 1, 1, CAST(5.40 AS Decimal(18, 2))),
		(3, 'Stadion #1', 16, 16, CAST(15.80 AS Decimal(18, 2))),
		(4, 'Cinema Hall #1', 1, 1, CAST(5.40 AS Decimal(18, 2))),
		(5, 'Stadion #1', 16, 16, CAST(15.80 AS Decimal(18, 2))),
		(6, 'Cinema Hall #1', 1, 1, CAST(5.40 AS Decimal(18, 2))),
		(7, 'Stadion #1', 16, 16, CAST(15.80 AS Decimal(18, 2))),
		(8, 'Cinema Hall #1', 1, 1, CAST(5.40 AS Decimal(18, 2))),
		(9, 'Stadion #1', 16, 16, CAST(15.80 AS Decimal(18, 2))),
		(10, 'Stadion #1', 16, 16, CAST(15.80 AS Decimal(18, 2)))
		
--- EventSeat
insert into dbo.EventSeat
	values 
		(1, 1, 1, 1),
		(1, 1, 2, 0),
		(1, 1, 3, 1),
		(1, 2, 1, 1),
		(1, 2, 2, 0),
		(1, 2, 3, 1),
		(2, 1, 1, 0),
		(2, 1, 2, 0),
		(2, 2, 1, 0),
		(2, 2, 2, 0),
		(3, 1, 1, 0),
		(3, 1, 2, 1),
		(3, 2, 1, 0),
		(3, 2, 2, 1),
		(4, 1, 1, 0),
		(4, 1, 2, 1),
		(4, 2, 1, 0),
		(4, 2, 2, 1),
		(5, 1, 1, 0),
		(5, 1, 2, 0),
		(5, 2, 1, 0),
		(5, 2, 2, 0),
		(6, 1, 1, 0),
		(6, 1, 2, 0),
		(6, 1, 3, 0),
		(6, 2, 1, 0),
		(6, 2, 2, 0),
		(6, 2, 3, 0),
		(7, 1, 1, 1),
		(7, 1, 2, 1),
		(7, 2, 1, 0),
		(7, 2, 2, 1),
		(8, 1, 1, 0),
		(8, 1, 2, 1),
		(8, 2, 1, 0),
		(8, 2, 2, 1),
		(9, 1, 1, 0),
		(9, 1, 2, 1),
		(9, 2, 1, 0),
		(9, 2, 2, 1),
		(10, 1, 1, 1),
		(10, 1, 2, 1),
		(10, 2, 1, 0),
		(10, 2, 2, 1)
	
--- Identity Users
insert into dbo.AspNetUsers
	values
	('1509fd70-c234-46fc-bdad-1d4ed54e4cb4',
	'admin@admin.com',
	'ADMIN@ADMIN.COM',
	'ADMIN@ADMIN.COM',
	'ADMIN@ADMIN.COM',
	1,
	'AQAAAAEAACcQAAAAEPidQQ5v29XgEYFtooIu3T4aEzhhx0KwvoUOrTD3bJcQj7aJuX2d2KRPpFoWN+Ogdw==',
	'T26LD5TYXYZTWA5XKZHJMONRWRS7E3JE',
	'2f2240f5-12c9-493c-8589-28e4f8aaac7f',
	'+333333333333',
	1,
	0,
	null,
	1,
	0,
	'Artsiom',
	'Krot',
	'be-BY',
	'03:00:00',
	0,
	CAST(0.0 AS Decimal(18, 2)),
	null)
		
--- Identity Roles
insert into dbo.AspNetRoles
	values
	('6b7d276e-e5a9-401b-b054-57e24b404efb', 'EventManager', 'EVENTMANAGER', '0e9af52f-3ae4-44ac-b18e-64f7e3c23dd8'),
	('716718e7-6f17-4e58-8b38-b1bd53759266', 'User', 'USER', 'c16e01ab-b27e-4a5b-a651-b63b5a8b7aea'),
	('f1a9cad5-ecdc-455b-8be7-2c2ebd3b82d8', 'Administrator', 'ADMINISTRATOR', '97a23f02-b402-44ff-ad7c-42ab2a0e35b5')

--- Identity UserRoles
insert into dbo.AspNetUserRoles
	values
	('1509fd70-c234-46fc-bdad-1d4ed54e4cb4', 'f1a9cad5-ecdc-455b-8be7-2c2ebd3b82d8')
		
--- Identity UserClaims
insert into dbo.AspNetUserClaims
	values
	('1509fd70-c234-46fc-bdad-1d4ed54e4cb4', 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role', 'Administrator')
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
