using System.Configuration;
using System.Globalization;
using System.IdentityModel.Tokens.Jwt;
using System.Net.Http.Headers;
using System.Security.Claims;
using System.Text;
using EventManagementApiClientGenerated;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Localization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Net.Http.Headers;
using RestEase;
using TicketManagement.Common.DI;
using TicketManagement.Common.Identity;
using TicketManagement.UserAPI.Settings;
using TicketManagement.WebUI;
using TicketManagement.WebUI.Client;
using TicketManagement.WebUI.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    var supportedCultures = new[]
                {
                    new CultureInfo("en-US"),
                    new CultureInfo("be-BY"),
                    new CultureInfo("ru-RU"),
                };
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
    options.DefaultRequestCulture = new RequestCulture("en-US");
});

builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");

builder.Services
    .AddControllersWithViews()
    .AddDataAnnotationsLocalization(options =>
    {
        options.DataAnnotationLocalizerProvider = (type, factory) =>
            factory.Create(typeof(SharedResource));
    })
    .AddViewLocalization();

var tokenSettings = builder.Configuration.GetSection(nameof(JwtTokenSettings));
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
        .AddCookie("Cookies", options =>
        {
            options.LoginPath = "/Identity/Account/Login";
            options.AccessDeniedPath = "/Identity/Account/AccessDenied";
            options.LogoutPath = "/Identity/Account/Logout";
            options.ExpireTimeSpan = TimeSpan.FromDays(1);
        })
                .AddJwtBearer(options =>
                {
                    options.Events = new JwtBearerEvents
                    {
                        OnTokenValidated = context =>
                        {
                            var userMachine = context.HttpContext.RequestServices.GetRequiredService<UserManager<User>>();

                            var user = userMachine.GetUserAsync(context.HttpContext.User);

                            if (user == null)
                            {
                                context.Fail("UnAuthorized");
                            }

                            return Task.CompletedTask;
                        },
                    };

                    options.RequireHttpsMetadata = false;
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidIssuer = tokenSettings[nameof(JwtTokenSettings.JwtIssuer)],
                        ValidateAudience = true,
                        ValidAudience = tokenSettings[nameof(JwtTokenSettings.JwtAudience)],
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(tokenSettings[nameof(JwtTokenSettings.JwtSecretKey)])),
                        ValidateLifetime = false,
                    };
                    options.SaveToken = true;
                })
    .AddPolicyScheme("JWT_OR_COOKIE", "JWT_OR_COOKIE", options =>
    {
        // runs on each request
        options.ForwardDefaultSelector = context =>
        {
            // filter by auth type
            string authorization = context.Request.Headers[HeaderNames.Authorization];
            if (!string.IsNullOrEmpty(authorization) && authorization.StartsWith("Bearer "))
            {
                return "Bearer";
            }

            return "Cookies";
        };
    });

////builder.Services.AddSession(
////            options =>
////            {
////                options.IdleTimeout = TimeSpan.FromMinutes(10);
////                options.Cookie.HttpOnly = true;
////                options.Cookie.IsEssential = true;
////            });

builder.Services.AddMvc();
builder.Services.AddRepositories(builder.Configuration.GetConnectionString("DefaultConnection"));

//// Registering autogenerated client
builder.Services.AddHttpClient("EventManagementAPIClient");
builder.Services.AddScoped(scope =>
{
    var httpClient = scope.GetService<IHttpClientFactory>().CreateClient("EventManagementAPIClient");
    var baseUrl = builder.Configuration["EventManagementApiAddress"];
    return new EventManagementApiClient(baseUrl, httpClient);
});

//// Registering reast ease client
builder.Services.AddScoped(scope =>
{
    var baseUrl = builder.Configuration["UserApiAddress"];
    return RestClient.For<IUserRestClient>(baseUrl);
});

builder.Services.AddBLLServices();
builder.Services.AddSingleton<ListThirdPartyEventsService>();

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("Administrator", builder =>
    {
        builder.RequireClaim(ClaimTypes.Role, "Administrator");
    });

    options.AddPolicy("EventManager", builder =>
    {
        builder.RequireAssertion(x => x.User.HasClaim(ClaimTypes.Role, "EventManager")
                                      || x.User.HasClaim(ClaimTypes.Role, "Administrator"));
    });

    options.AddPolicy("User", builder =>
    {
        builder.RequireClaim(ClaimTypes.Role, "User");
    });
});

builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddControllersWithViews();

var app = builder.Build();

app.UseRequestLocalization();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
    app.UseExceptionHandler("/Home/Error");

    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapRazorPages();

app.Run();
