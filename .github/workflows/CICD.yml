name: TicketManagement.NET

on:
  push:
    branches:
      - '*'
  pull_request:
    types: [opened,reopened]

env:
  DOTNET_VERSION: '7.0.x' # The .NET SDK version to use

jobs:
  build:
    name: 🏗 TicketManagement's Build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: ⚙ Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: 🛠 Install dependencies
      run:  dotnet restore
    - name: 📑 Build TicketManagement.Database
      run:  dotnet build "src/TicketManagement.Database" /p:NetCoreBuild=true
    - name: 🏗 Build all projects
      run:  dotnet build --configuration Release --no-restore

  tests:
    name: 🧾 Tests run
    needs: [build]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: ⚙ Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: 🛠 Install dependencies
      run:  dotnet restore
    - name: 🔨 Build unit tests
      run:  dotnet build "test/TicketManagement.UnitTests" --configuration Release --no-restore
    - name: 🔨 Build integration tests
      run:  dotnet build "test/TicketManagement.IntegrationTests" --configuration Release --no-restore
    - name: 🧪 Unit tests
      run:  dotnet test "test/TicketManagement.UnitTests" --configuration Release --no-build --verbosity normal
    - name: 🧬 Integration tests
      run:  dotnet test "test/TicketManagement.IntegrationTests" --configuration Release --no-build --verbosity normal
 
  containerization:
    name: 🎁 Containerization
    needs: tests
    if: github.ref == 'refs/heads/master'
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build the stack
      run: |
        docker build -f src\TicketManagement.UserAPI\dockerfile --force-rm -t ticketmanagementuserapi .
        docker build -f src\TicketManagement.EventManagementAPI\dockerfile --force-rm -t ticketmanagementeventmanagementapi .

  packagingpushing:
    name: 📦 Packaging and Pushing
    needs: tests
    if: github.ref == 'refs/heads/master'
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: ⚙ Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: ⚙ Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest
    - name: 📁 Create artifacts folder
      run: |
        mkdir "artifacts"
        mkdir "artifacts/TicketManagement.Database"
        mkdir "artifacts/TicketManagement.WebUI"
        mkdir "artifacts/TicketManagement.UserAPI"
        mkdir "artifacts/TicketManagement.EventManagementAPI"
    - name: 🛠 Install dependencies
      run: dotnet restore
    - name: 🏗 Publish WebUI
      run: dotnet publish "src/TicketManagement.WebUI" --configuration Release --output artifacts/TicketManagement.WebUI --no-restore
      env:
        CI: false
    - name: 🏗 Publish UserAPI
      run: dotnet publish "src/TicketManagement.UserAPI" --configuration Release --output artifacts/TicketManagement.UserAPI --no-restore
    - name: 🏗 Publish EventManagementAPI
      run: dotnet publish "src/TicketManagement.EventManagementAPI" --configuration Release --output artifacts/TicketManagement.EventManagementAPI --no-restore
# ***   My octopus account has been expired.    ***
#
#    - name: 🐙 Install Octopus CLI
#      uses: OctopusDeploy/install-octopus-cli-action@v1.1.6
#      with:
#        version: latest
#    - name: 🐙 Package Database
#      run: octo pack --id="TicketManagement.Database" --format="zip" --version="${{ github.run_number }}" --basePath="artifacts/TicketManagement.Database" --outFolder="artifacts"
#    - name: 🐙 Package WebUI
#      run: octo pack --id="TicketManagement.WebUI" --format="zip" --version="${{ github.run_number }}" --basePath="artifacts/TicketManagement.WebUI" --outFolder="artifacts"
#    - name: 🐙 Package UserAPI
#      run: octo pack --id="TicketManagement.UserAPI" --format="zip" --version="${{ github.run_number }}" --basePath="artifacts/TicketManagement.UserAPI" --outFolder="artifacts"
#    - name: 🐙 Package EventManagementAPI
#      run: octo pack --id="TicketManagement.EventManagementAPI" --format="zip" --version="${{ github.run_number }}" --basePath="artifacts/TicketManagement.EventManagementAPI" --outFolder="artifacts"
#    - name: 🐙 Push TicketManagement packages
#      uses: OctopusDeploy/push-package-action@v1.1.1
#      with:
#        api_key: ${{ secrets.OCTOPUSSERVERAPIKEY }}
#        server: ${{ secrets.OCTOPUSSERVERURL }}
#        packages: "artifacts/TicketManagement.Database.${{ github.run_number }}.zip,artifacts/TicketManagement.WebUI.${{ github.run_number }}.zip,artifacts/TicketManagement.UserAPI.${{ github.run_number }}.zip,artifacts/TicketManagement.EventManagementAPI.${{ github.run_number }}.zip"
#        space: ${{ secrets.OCTOPUSSERVER_SPACE }}
#    - name: 🐙 Create and deploy release
#      uses: OctopusDeploy/create-release-action@v1.1.1
#      with:
#        api_key: ${{ secrets.OCTOPUSSERVERAPIKEY }}
#        server: ${{ secrets.OCTOPUSSERVERURL }}
#        space: ${{ secrets.OCTOPUSSERVER_SPACE }}
#        project: "TicketManagement"
#        deploy_to: "Development"
#        progress: true
#    - name: 🐙 Deploy to Staging 
#      run: octo deploy-release --project TicketManagement --space ${{ secrets.OCTOPUSSERVER_SPACE }} --version latest --deployto Staging --server ${{ secrets.OCTOPUSSERVERURL }} --apiKey ${{ secrets.OCTOPUSSERVERAPIKEY }}
